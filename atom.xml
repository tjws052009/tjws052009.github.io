<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Quick Memos]]></title>
  <link href="http://tjws052009.github.io/atom.xml" rel="self"/>
  <link href="http://tjws052009.github.io/"/>
  <updated>2014-03-26T15:01:58+09:00</updated>
  <id>http://tjws052009.github.io/</id>
  <author>
    <name><![CDATA[Tomo S.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dockerちょっと試す]]></title>
    <link href="http://tjws052009.github.io/blog/2014/03/26/dockertiyotutoshi-su/"/>
    <updated>2014-03-26T14:52:47+09:00</updated>
    <id>http://tjws052009.github.io/blog/2014/03/26/dockertiyotutoshi-su</id>
    <content type="html"><![CDATA[<p>@TODO</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubyのbindingをやっと理解した話し]]></title>
    <link href="http://tjws052009.github.io/blog/2014/03/07/rubyfalsebindingwoyatutoli-jie-sitahua-si/"/>
    <updated>2014-03-07T18:58:12+09:00</updated>
    <id>http://tjws052009.github.io/blog/2014/03/07/rubyfalsebindingwoyatutoli-jie-sitahua-si</id>
    <content type="html"><![CDATA[<p>自分で ERB を使ってて binding を良くわからず使ってたので、自分用にメモ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#-*- coding:utf-8 -*-</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Ruby skeleton file</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;erb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Huga</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">get_binding</span>
</span><span class='line'>    <span class="nb">binding</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hoge</span> <span class="o">=</span> <span class="mi">222</span>
</span><span class='line'>    <span class="vi">@hoge</span> <span class="o">=</span> <span class="mi">444</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="nb">instance_eval</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">res</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">erb</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">hoge</span> <span class="o">=</span> <span class="mi">111</span>
</span><span class='line'><span class="vi">@hoge</span> <span class="o">=</span> <span class="mi">333</span>
</span><span class='line'>
</span><span class='line'><span class="nb">test</span> <span class="o">=</span> <span class="no">Huga</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;erb.result&quot;</span>
</span><span class='line'>  <span class="n">erb</span><span class="o">.</span><span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test2</span> <span class="o">=</span> <span class="no">Huga</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;erb.result(binding)&quot;</span>
</span><span class='line'>  <span class="n">erb</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= hoge %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="vi">@hoge</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上のコードを実行すると、bindingによる変数の受け渡しがどう動くか見れるかと思います。</p>

<p>instance_eval にローカル変数の <code>hoge</code> と、インスタンス変数の <code>@hoge</code> の受け渡しが色々と違う。当たり前だけど、こういう事ねと初めて理解した。</p>

<p>binding を明示的に実行すると呼び出されるクラス下のスコープを参照するようにします。
Hugaクラスで <code>hoge</code> を定義しても、そちらの <code>hoge</code> は見ないよう。
Hugaクラスの <code>@hoge</code> は、さすがに、 instance_eval で反映された状態で出る。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">erb</span><span class="o">.</span><span class="n">result</span>
</span><span class='line'><span class="mi">111</span>
</span><span class='line'><span class="mi">333</span>
</span><span class='line'>
</span><span class='line'><span class="n">erb</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
</span><span class='line'><span class="mi">111</span>
</span><span class='line'><span class="mi">444</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FactoryGirlでハッシュを保存する時]]></title>
    <link href="http://tjws052009.github.io/blog/2014/02/21/factorygirldehatusiyuwobao-cun-surushi/"/>
    <updated>2014-02-21T15:26:17+09:00</updated>
    <id>http://tjws052009.github.io/blog/2014/02/21/factorygirldehatusiyuwobao-cun-surushi</id>
    <content type="html"><![CDATA[<p>理解不足だからかもしれないですが、FactoryGirlでオブジェクトを作る時に Hash
を値に使おうとした時に、怒られた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>factory :obj, class: Model::Object do
</span><span class='line'>  obj_attr1 1
</span><span class='line'>  obj_attr2 'ほげ'
</span><span class='line'>  obj_hash_str {:spot1 =&gt; 0, :spot2 =&gt; 0, :spot3 =&gt; 0, :spot4 =&gt; 0}.to_json
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>下記のように、カッコに囲んで書けばいいみたい。なぜにかちょっとわからないんですが、ブロックとして処理しようとしてたんですかね？</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>factory :obj, class: Model::Object do
</span><span class='line'>  obj_attr1 1
</span><span class='line'>  obj_attr2 'ほげ'
</span><span class='line'>  obj_hash_str ({:spot1 =&gt; 0, :spot2 =&gt; 0, :spot3 =&gt; 0, :spot4 =&gt; 0}).to_json
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh の unknown host の回避]]></title>
    <link href="http://tjws052009.github.io/blog/2014/02/20/ssh-false-unknown-host-falsehui-bi/"/>
    <updated>2014-02-20T12:30:20+09:00</updated>
    <id>http://tjws052009.github.io/blog/2014/02/20/ssh-false-unknown-host-falsehui-bi</id>
    <content type="html"><![CDATA[<h1>unknown hosts を自動で authorize したい</h1>

<p>以下の設定で、いちいち unknown host を authorize するために yes/no
を答えなくていい。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ~/.ssh/configの該当するHost に
</span><span class='line'>StrictHostKeyChecking no</span></code></pre></td></tr></table></div></figure>


<p>正直言ってあんまり安全では無いことは承知でやるなら上で良さそう。</p>

<p>もしもうちょっとちゃんとやるなら、下記のページみたいな物が必要かもしれないですね。</p>

<p><a href="https://sethvargo.com/add-ssh-known-hosts-with-chef/">Add SSH Known Hosts with Chef</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liquid Exception in octopress]]></title>
    <link href="http://tjws052009.github.io/blog/2014/02/18/liquid-exception-in-octopress/"/>
    <updated>2014-02-18T19:04:11+09:00</updated>
    <id>http://tjws052009.github.io/blog/2014/02/18/liquid-exception-in-octopress</id>
    <content type="html"><![CDATA[<p>octopressを使ったブログを更新してる時に下記のようなエラーに出くわした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> Liquid Exception: Variable '{{status: result, error: []}' was not properly 
</span><span class='line'>terminated with regexp: /\}\}/  in
</span><span class='line'>2014-02-04-get-and-post-method-for-sinatra.markdown
</span><span class='line'>/home/wolf/.rvm/gems/ruby-1.9.3-p125/gems/liquid-2.3.0/lib/liquid/block.rb:78:in
</span><span class='line'>`create_variable'
</span><span class='line'>/home/wolf/.rvm/gems/ruby-1.9.3-p125/gems/liquid-2.3.0/lib/liquid/block.rb:38:in
</span><span class='line'>`parse'
</span><span class='line'>/home/wolf/.rvm/gems/ruby-1.9.3-p125/gems/liquid-2.3.0/lib/liquid/document.rb:5:in
</span><span class='line'>`initialize'
</span><span class='line'>/home/wolf/.rvm/gems/ruby-1.9.3-p125/gems/liquid-2.3.0/lib/liquid/template.rb:58:in
</span><span class='line'>`new'
</span><span class='line'>/home/wolf/.rvm/gems/ruby-1.9.3-p125/gems/liquid-2.3.0/lib/liquid/template.rb:58:in
</span><span class='line'>`parse'
</span><span class='line'>/home/wolf/.rvm/gems/ruby-1.9.3-p125/gems/liquid-2.3.0/lib/liquid/template.rb:46:in
</span><span class='line'>`parse'
</span><span class='line'>/home/wolf/.rvm/gems/ruby-1.9.3-p125/gems/jekyll-0.12.0/lib/jekyll/convertible.rb:79:in
</span><span class='line'>`do_layout'
</span><span class='line'>/home/wolf/prgm/octopress/plugins/post_filters.rb:167:in `do_layout'
</span><span class='line'>/home/wolf/.rvm/gems/ruby-1.9.3-p125/gems/jekyll-0.12.0/lib/jekyll/post.rb:195:in
</span><span class='line'>`render'
</span><span class='line'>/home/wolf/.rvm/gems/ruby-1.9.3-p125/gems/jekyll-0.12.0/lib/jekyll/site.rb:200:in
</span><span class='line'>`block in render'</span></code></pre></td></tr></table></div></figure>


<p>どうもコードをコピーして来た時に、 <code>{{ }}</code>  をくっつけて書いたのが気にくわないらしい。</p>

<p>そのため、octopressでは二重中カッコを書く時は対応方法がふたつあるらしい</p>

<ul>
<li>1) 2つの中カッコの間にスペースを入れる <code>{ {</code></li>
<li>2) {% raw %} <code>{{</code> {% endraw %} のようにで文字列を囲む</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrantをインストールした時の備忘録]]></title>
    <link href="http://tjws052009.github.io/blog/2014/02/18/vagrantwoinsutorusitashi-falsebei-wang-lu/"/>
    <updated>2014-02-18T18:45:27+09:00</updated>
    <id>http://tjws052009.github.io/blog/2014/02/18/vagrantwoinsutorusitashi-falsebei-wang-lu</id>
    <content type="html"><![CDATA[<h1>Vagrant</h1>

<p>参考文献
<a href="http://d.hatena.ne.jp/naoya/20130205/1360062070">http://d.hatena.ne.jp/naoya/20130205/1360062070</a></p>

<h2>Vagrant をインストール</h2>

<p>VirtualBoxをインストールしておく。(<a href="http://virtualbox.org">http://virtualbox.org</a>)</p>

<p>さらに <a href="http://download.vagrantup.com">http://download.vagrantup.com</a> から必要なインストーラーをダウンロードして、vagrantをインストールしてやる。</p>

<h2>Vagrant のセットアップ</h2>

<h3>Vagrantの大枠となる box を用意する</h3>

<p>なければ、サイトからも落とせる。各OS用に用意されている物でも良い。</p>

<blockquote><p><a href="http://www.vagrantup.com/">http://www.vagrantup.com/</a></p></blockquote>

<p>そして、vagrant のおおもととなる物を準備してやる。サイトは Ubuntuをデフォルトに使っているっぽいが、うちは CentOSのほうがいいので、それを下記のサイトからとってくる(必要なの使ってね)。そして、次に <code>vagrant box</code> に追加してやる。</p>

<blockquote><p><a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a></p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant box add #{name_of_box} https://github.com/2creatives/vagrant-centos/releases/download/v6.5.1/centos65-x86_64-20131205.box</span></code></pre></td></tr></table></div></figure>


<h3>Vagrantの設定を用意する</h3>

<p>次は <code>vagrant init</code> で設定ファイルを作ってやる。基本的にはvagrant用のフォルダを用意して、そこで <code>vagrant init</code> コマンドを叩くと、 Vagrantfile が作成される。
そこから <code>vagrant up</code> を叩くと vagrantのインスタンスが構築され、仮想環境が立ち上がる。</p>

<h3>Vagrantfile について</h3>

<p>Vagrantfile は vagrant がどのようなマシンが仮想的に作られるべきかを記すファイルになる。</p>

<p>ひとつのプロジェクトにつき、ひとつの Vagrantfile で動き、バージョンコントールされているべきである。</p>

<p>その時に注意すべき点は、.vagrant ファイルを管理しない事。そのため、下記の.gitignoreを追加しておく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># .gitignore
</span><span class='line'>--------------
</span><span class='line'># vagrant gitignore
</span><span class='line'>.vagrant</span></code></pre></td></tr></table></div></figure>


<ul>
<li>どうでもいい注意点だが、centos でデフォルトで iptablesがあがってて外部からアクセスしようとして失敗したりしてはまらないようにメモ。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[良く使ってるキーバインド]]></title>
    <link href="http://tjws052009.github.io/blog/2014/02/17/liang-kushi-tuterukibaindo/"/>
    <updated>2014-02-17T19:38:37+09:00</updated>
    <id>http://tjws052009.github.io/blog/2014/02/17/liang-kushi-tuterukibaindo</id>
    <content type="html"><![CDATA[<p>何気にコマンドラインなどで十字キーを使う人を見てて、なんか効率悪そうだなーって思ったので、ホームポジションから動かさずにコマンドラインでカーソルを移動したりする話。
カーソル移動にキーボードのホームポジションから指が離すの許されるのなんて小学生までだよねーってのは冗談ですが、リアルに、慣れるとかなりはかどります。</p>

<p>（ちなみに、mac なら普通に色んな場所で使えるのでかなり便利。ブラウザ内でも）</p>

<p>基本的に emacs のキーバインド（おおもとは *nix系のキーバインドなのかな？）から覚えた物なのですが・・・</p>

<hr />

<p>【前提】左小指の一番左のキーが未だ caps
の人ってさすがにいないですよね。いたら、左小指の一番左のキー（だいたいcapsキー）をctrlキーにマッピングして下さい。小指が幸せになります。
caps キーが欲しいッて？そんなもん知らん。</p>

<h3>良く使うキーバインド</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl + f : 一文字進む
</span><span class='line'>ctrl + b : 一文字戻る
</span><span class='line'>ctrl + a : 行頭に戻る
</span><span class='line'>ctrl + e : 行末に進む
</span><span class='line'>ctrl + n : 次の行に進む
</span><span class='line'>ctrl + p : 前の行に戻る
</span><span class='line'>ctrl + v :  1ページ(1画面？)進む
</span><span class='line'>crtl + k : 行をヤンク（カットと同じような意味）
</span><span class='line'>ctrl + y : ヤンクした行をペースト
</span><span class='line'>ctrl + d : 次の文字を削除
</span><span class='line'>ctrl + h : 前の文字を削除
</span><span class='line'>ctrl + t : 文字の位置をひっくり返す</span></code></pre></td></tr></table></div></figure>


<p>後はメタキーを使うキーバインドばっかで使ってなかったのでわかりません！てかコマンドラインだと、
<code>ctrl + w</code> とかでカーソル以前の文字列を削除するとかあった気もするんですが。なんか、あんまり使わない。。。。ので後は自分で頑張って下さい。</p>

<p>  興味ある方は　emacs keybind とかで調べたら出るかもしれないです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[padrinoを試す]]></title>
    <link href="http://tjws052009.github.io/blog/2014/02/07/padrinowoshi-su/"/>
    <updated>2014-02-07T14:15:44+09:00</updated>
    <id>http://tjws052009.github.io/blog/2014/02/07/padrinowoshi-su</id>
    <content type="html"><![CDATA[<p>ちょっと試しに padrino を使ってみようかと。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install padrino
</span><span class='line'>
</span><span class='line'>$ padrino g project hottmp -d activerecord -a mysql -s jquery -e erb -c compass -t rspec</span></code></pre></td></tr></table></div></figure>


<p>とりあえずコレで指定した物が入りました。</p>

<p>個人的にあんまり Haml　とかのテンプレートエンジンが好きでなくて、erb
あたりがちょうどしっくりきます。Coffee より jQuery だったり。</p>

<p>これってどうなんでしょうね？</p>

<p>とりあえず、もうちょっといじって、それっぽくなってきたら続報あげます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[get and post method for sinatra]]></title>
    <link href="http://tjws052009.github.io/blog/2014/02/04/get-and-post-method-for-sinatra/"/>
    <updated>2014-02-04T18:17:18+09:00</updated>
    <id>http://tjws052009.github.io/blog/2014/02/04/get-and-post-method-for-sinatra</id>
    <content type="html"><![CDATA[<p>Sinatraでエンドポイントを用意して、リアルタイムにIDの重複チェックとかしたいと思い、ajaxで使用する前提の物を書いてみた。</p>

<p>id の値をサーバーにPOSTし、結果が json で返ってくるようにしてみた。
今回は開発環境でドメインまたいでテストを行えたらいいなと思い
jsonpで返そうと当初は考えていた。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 頭の中ではこんな感じになればいいなと
</span><span class='line'>$ curl -d 'id=testtsugi01' http://test.tsugi2009.com/verify_id
</span><span class='line'>#  =&gt; verify({"status": "ok", error: []})</span></code></pre></td></tr></table></div></figure>


<p>で、こんなコードを書いてみた</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># sinatra.rb
</span><span class='line'>post '/verify_id' do
</span><span class='line'>  result = User.verify_id(params['id'])
</span><span class='line'>
</span><span class='line'>  return "verify(#{ {status: result, error: []}.to_json})"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span> <span class="nx">test</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;http://test.tsugi2009.com/verify_id&quot;</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;POST&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;piyof&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;id&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#piyof_submit&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://test.tsugi2009.com/verify_id&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#piyof&#39;</span><span class="p">).</span><span class="nx">serialize</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">jsonpCallback</span><span class="o">:</span> <span class="s1">&#39;verify&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>とりあえず、 <a href="http://test.tsugi2009.com/">http://test.tsugi2009.com/</a> 下なら大丈夫だけど <a href="http://tsugi2009.com/">http://tsugi2009.com/</a> とかドメインまたぐとちゃんと動かない。
POSTのはずが、GETでパラメーターを送信してたり。（それで 404 が返ってきて一瞬焦った）</p>

<p>良く考えると（良く考えなくても）、そもそもクロスドメイン制約でjsonpのPOSTとかできへんやん・・・
しかも、POST前提に組んでたので、GETになったjsonp リクエストには対応出来ず 404 が返る状況に。</p>

<p>とりあえず、色々諦めて、開発中はjsonpを使って、本番ではjsonにしてもらうっていう綱渡りような事に。
ただし、SinatraでひとつのエンドポイントをGETとPOSTに対応するため、似たようなコードを二回書く事になるのか、と思いGETとPOSTに対応した物が出来ないか調べてみた。そしてここに行き着く。</p>

<p><a href="http://ujihisa.blogspot.jp/2009/11/accepting-both-get-and-post-method-in.html">Accepting Both Get And Post Method in Sinatra</a></p>

<p>出来るならやるしないですよね。言うことで、それも含め実装。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span> <span class="nx">sinatra</span><span class="p">.</span><span class="nx">rb</span>
</span><span class='line'><span class="nx">module</span> <span class="nx">Sinatra</span>
</span><span class='line'>  <span class="nx">module</span> <span class="nx">GetOrPost</span>
</span><span class='line'>    <span class="nx">def</span> <span class="nx">get_or_post</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">opts</span><span class="o">=</span><span class="p">{},</span> <span class="o">&amp;</span><span class="nx">block</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">get</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">opts</span><span class="o">=</span><span class="p">{},</span> <span class="o">&amp;</span><span class="nx">block</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">post</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">opts</span><span class="o">=</span><span class="p">{},</span> <span class="o">&amp;</span><span class="nx">block</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">end</span>
</span><span class='line'>  <span class="nx">end</span>
</span><span class='line'><span class="nx">end</span>
</span><span class='line'>
</span><span class='line'><span class="nx">register</span> <span class="nx">GetOrPost</span>
</span><span class='line'>
</span><span class='line'><span class="nx">get_or_post</span> <span class="s1">&#39;/verify_id&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">=</span> <span class="nx">User</span><span class="p">.</span><span class="nx">verify_id</span><span class="p">(</span><span class="nx">params</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="err">本当に正しく</span><span class="nx">POST</span><span class="err">されたら</span> <span class="nx">json</span> <span class="err">っていう前提で書いてます。</span><span class="nx">gkbr</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="nx">raw</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span><span class="nx">status</span><span class="o">:</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">error</span><span class="o">:</span> <span class="p">[]}.</span><span class="nx">to_json</span> <span class="k">if</span> <span class="nx">request</span><span class="p">.</span><span class="nx">request_method</span> <span class="o">==</span> <span class="s1">&#39;POST&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;verify(#{ {status: result, error: []}.to_json})&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="nx">endraw</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="nx">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">#</span> <span class="nx">prod</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="c1">// 本番用 同じ、 tsugi2009.comの下で動いてるはず</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;http://tsugi2009.com/verify_id&quot;</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;POST&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;piyof&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;id&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#piyof_submit&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://tsugi2009.com/verify_id&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#piyof&#39;</span><span class="p">).</span><span class="nx">serialize</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">test</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="c1">// テスト用。 test.tsugi2009.com から叩かれるとは限らない</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;http://test.tsugi2009.com/verify_id&quot;</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;POST&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;piyof&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;id&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#piyof_submit&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://test.tsugi2009.com/verify_id&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#piyof&#39;</span><span class="p">).</span><span class="nx">serialize</span><span class="p">(),</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">jsonpCallback</span><span class="o">:</span> <span class="s1">&#39;verify&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>やっと動いた。ajaxで色々と忘れそうなので、この実装をどうにかしたいと思ってるけど、どうしよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first post]]></title>
    <link href="http://tjws052009.github.io/blog/2014/02/03/my-first-post/"/>
    <updated>2014-02-03T12:01:37+09:00</updated>
    <id>http://tjws052009.github.io/blog/2014/02/03/my-first-post</id>
    <content type="html"><![CDATA[<p>The <code>git log</code> command has a couple of useful flags, but I never can remember what they are.</p>

<p>Therefore, I decided to use the git aliases to create an alias command which
would include the flags on default.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ~/.gitconfig
</span><span class='line'>
</span><span class='line'>[alias]
</span><span class='line'>  lg = 'log --decorate'
</span><span class='line'>  </span></code></pre></td></tr></table></div></figure>


<p>By adding the lines above, <code>git lg</code> would be identical to calling <code>git log
--drecorate</code>.</p>

<p>Now the only problem is if I would remember to actually use the alias&hellip;</p>
]]></content>
  </entry>
  
</feed>
